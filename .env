# Database Configuration
MYSQL_HOST=localhost
MYSQL_PORT=3306
MYSQL_USER=sqluser
MYSQL_PASSWORD=sqlpassword
MYSQL_DATABASE=sqleditor

POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_USER=postgres
POSTGRES_PASSWORD=sqlpassword
POSTGRES_DATABASE=sqleditor

# Database URLs (used by the app)
# For Docker Compose (when running in containers)
# POSTGRES_URL=postgresql://app:app@postgres:5432/app
# MYSQL_URL=mysql://root:root@mysql:3306/app?connectionLimit=10

# For Local Development (when running npm run dev)
POSTGRES_URL=postgresql://app:app@localhost:5432/app
MYSQL_URL=mysql://root:root@localhost:3306/app?connectionLimit=10

# Next.js Configuration
GEMINI_API_KEY=AIzaSyD-pNprljHkQWAHw2zfwW1M7LxVgT7qriE
NEXT_PUBLIC_APP_URL=http://localhost:3000

# AI SQL Studio - .env.example
# Copy this file to ".env" and fill in the values.
# All variables are used server-side only.

# --- AI (Gemini) ---
# Use either GEMINI_API_KEY or GOOGLE_GENERATIVE_AI_API_KEY.
# The app will prefer GEMINI_API_KEY if both are set.
# GEMINI_API_KEY=your_gemini_api_key_here
# GOOGLE_GENERATIVE_AI_API_KEY=your_gemini_api_key_here

# --- PostgreSQL ---
# When running with Docker Compose (service name: postgres)
POSTGRES_URL=postgres://app:app@postgres:5432/app
# If running locally (without Docker), uncomment this instead:
# POSTGRES_URL=postgres://app:app@localhost:5432/app

# Optional: generic fallback used by lib/db.ts (will use POSTGRES_URL if set)
# DATABASE_URL=postgres://app:app@postgres:5432/app

# --- MySQL ---
# When running with Docker Compose (service name: mysql)
MYSQL_URL=mysql://root:root@mysql:3306/app?connectionLimit=10
# If running locally (without Docker), uncomment this instead:
# MYSQL_URL=mysql://root:root@localhost:3306/app?connectionLimit=10
